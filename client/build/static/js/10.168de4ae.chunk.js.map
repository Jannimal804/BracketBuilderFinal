{"version":3,"sources":["utility/API.js","components/InfoWindow.js","components/GoogleMaps.js"],"names":["axios__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","__webpack_exports__","getFromGeo","search","axios","get","concat","signUp","userData","console","log","post","getCompetitors","getMatches","beltType","weightClass","withStyles","card","maxWidth","media","height","paddingTop","props","react_default","a","createElement","GoogleMap","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createInfoWindow","bind","assertThisInitialized","handleChange","handleSubmit","state","value","lat","lng","event","preventDefault","setState","target","_this2","API","then","res","data","results","geometry","location","catch","err","e","map","thisComponent","infoWindow","window","google","maps","InfoWindow","content","position","latLng","addListener","name","address","i","length","formatted_address","render","components_InfoWindow","document","getElementById","setContent","open","_this3","type","onChange","onClick","Map","id","options","center","zoom","onMapLoad","service","places","PlacesService","request","query","radius","textSearch","status","PlacesServiceStatus","OK","_loop","image","url","scaledSize","Size","origin","Point","anchor","marker","Marker","icon","Component"],"mappings":"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","file":"static/js/10.168de4ae.chunk.js","sourcesContent":["import axios from \"axios\";\n\n//var db = require(\"../../../models\");\n\nexport default {\n    getFromGeo: function(search){\n        return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${search}&key=AIzaSyDZYOxZZL8kgIlC4RLfG8Gkfr8xHnZmFTc`)\n    },\n\n    signUp: function(userData) {\n        console.log(\"sending request!\");\n        return axios.post('/api/signup', userData)\n    },\n\n     // Gets all books\n    getCompetitors: function() {\n        console.log(\"requesting users!\")\n    return axios.get(\"/api/user_data\");\n  },\n  \n  getMatches: function(beltType, weightClass) {\n    console.log(\"getting matches!\")\nreturn axios.get(`/api/users/${beltType}/${weightClass}`); \n}\n\n  // Gets the book with the given id\n  //instead of ID weight & belt and tacked onto URL\n//   getCompetitor: function(beltLevel) {\n//     return axios.get(\"/api/competitors/\" + beltLevel);\n//   },\n\n  // Saves a book to the database\n//   followCompetitor: function(followCompetitor) {\n//     return axios.post(\"/api/competitors\", followCompetitor);\n//   },\n\n// allCompetitors: function(allCompetitors) {\n//     return axios.get(\"/api/competitors\")\n//     console.log(req.body);\n//     db.reactbb.findAll({}).then(function(reactbb) {\n//       res.json(reactbb);\n//  },\n\n\n//   // Create a new competitors\n// //   app.post(\"/api/competitors\", function(req, res) {\n// //     // run a query to get users that match our user's belt + weight\n// //     const userData = req.body;\n\n// //     db.Competitors.findAll({\n// //       where: { belt_color: userData.belt_color, weight: userData.weight}\n// //     }).then((matchesRes) => {\n// //       db.Competitors.create(req.body).then(() => {\n// //         res.json(matchesRes); \n// //       });      \n// //     });\n// //   });\n\n\n//   matchCompetitors: function(matchCompetitors) {\n//     db.User.findOne({\n//         where: {\n//           email: email\n//         }\n//   return axios.get(\"/api/competitors/:beltType/:weightClass\", matchCompetitors);\n//     }\n}","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%',\n  },\n};\n\nfunction InfoWindow(props) {\n  return (\n    <div>\n      \n    </div>\n  );\n}\n\n\nexport default withStyles(styles)(InfoWindow);","import React, { Component } from \"react\";\nimport { render } from 'react-dom';\nimport Map from \"./Map\";\nimport InfoWindow from \"./InfoWindow\";\nimport API from \"../utility/API\";\n// import { FormGroup, Label, Input, Col, Button, Row } from \"reactstrap\";\n\nclass GoogleMap extends Component {\n\n    constructor() {\n        super();\n        this.createInfoWindow = this.createInfoWindow.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = {\n            value: \"\",\n            lat: \"\",\n            lng: \"\"\n        }\n    }\n\n    handleChange(event) {\n        event.preventDefault();\n        this.setState({ value: event.target.value });\n    }\n\n    // Handling the user inputted zipcode once they click \"Submit\"\n    handleSubmit(event) {\n        event.preventDefault();\n        this.setState({ value: event.target.value });\n        API.getFromGeo(this.state.value).then((res) => {\n            this.setState({\n                lat: res.data.results[0].geometry.location.lat,\n                lng: res.data.results[0].geometry.location.lng\n            })\n        }).catch(err => {\n            return err\n        })\n    }\n\n    // Creates the info window element\n    createInfoWindow(e, map, results, thisComponent) {\n        const infoWindow = new window.google.maps.InfoWindow({\n            content: '<div id=\"infoWindow\" />',\n            position: { lat: e.latLng.lat(), lng: e.latLng.lng() }\n        })\n        infoWindow.addListener('domready', e => {\n            var name;\n            var address;\n            for (var i = 0; i < results.length; i++) {\n                if (thisComponent.position.lat() === results[i].geometry.location.lat()) {\n                    name = results[i].name\n                    address = results[i].formatted_address\n                }\n            }\n            render(<InfoWindow />, document.getElementById('infoWindow'))\n            infoWindow.setContent(name + \"</br>\" + address);\n        })\n        infoWindow.open(map)\n    }\n\n    render() {\n        return (\n            <div>\n                {/* <Row>\n                    <Col xl=\"4\" lg=\"6\" md=\"12\">\n                        <FormGroup>\n                            <Label for=\"pinput\">Enter a zipcode to find gyms near you!</Label>\n                            <Input type=\"text\" id=\"pinput\" name=\"pinput\" placeholder=\"Enter Zipcode\" />\n                            <Button className=\"gradient-nepal\" >Search</Button>{\" \"}\n                        </FormGroup>\n                    </Col>\n                </Row> */}\n                <form>\n                    <label>Enter a zipcode to find gyms near you!\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />\n                </form>\n                {/* If we succesfully receive latitude and longitude coordinates, load the map */}\n                {this.state.lat && this.state.lng &&\n                    <div>\n                        <Map\n                            // Initial map settings. Zoom and center.\n                            id=\"myMap\"\n                            options={{\n                                center: { lat: (this.state.lat), lng: (this.state.lng) },\n                                zoom: 11\n                            }}\n                            onMapLoad={map => {\n                                // Initializing the Google Places Service\n                                var service = new window.google.maps.places.PlacesService(map);\n                                // Returning JSON data from Google Places based on our query, location, and radius in meters\n                                var request = {\n                                    query: \"jiu jitsu gym\",\n                                    location: { lat: (this.state.lat), lng: (this.state.lng) },\n                                    radius: \"10000\"\n                                }\n                                var thisComponent = this;\n                                // Creating markers based on JSON data we received\n                                service.textSearch(request, function (results, status) {\n                                    if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n                                        for (var i = 0; i < results.length; i++) {\n                                            var lat = (results[i].geometry.location.lat())\n                                            var lng = (results[i].geometry.location.lng())\n                                            var image = {\n                                                url: (process.env.PUBLIC_URL + '/kimono.png'),\n                                                scaledSize: new window.google.maps.Size(40, 43),\n                                                origin: new window.google.maps.Point(0, 0),\n                                                anchor: new window.google.maps.Point(0, 32)\n                                            }\n                                            // Creates the markers on the map\n                                            const marker = new window.google.maps.Marker({\n                                                position: { lat: lat, lng: lng },\n                                                map: map,\n                                                icon: image,\n                                            });\n                                            // When a marker is clicked an info window pops up\n                                            marker.addListener('click', e => {\n                                                thisComponent.createInfoWindow(e, map, results, marker)\n                                            })\n                                        }\n                                    }\n                                });\n                            }}\n                        />\n                    </div>\n                }\n            </div>\n        )\n            ;\n    }\n}\n\nexport default GoogleMap;"],"sourceRoot":""}